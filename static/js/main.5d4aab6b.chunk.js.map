{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Contacto.js","components/Contactos.js","components/ContactoSeleccionado.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","placeholder","Formulario","agregarContacto","useState","nombres","apellidos","fechaNac","direccion","telCasa","telCelular","observaciones","contacto","setContacto","error","setError","handleChange","e","copiaContacto","target","name","value","onSubmit","preventDefault","trim","uuidv4","role","htmlFor","onChange","cols","rows","Contacto","setContactoSelec","onClick","src","alt","Contactos","contactos","map","c","ContactoSeleccionado","contactoselec","App","contactosLS","JSON","parse","localStorage","getItem","setContactos","objContacto","contactosAntiguos","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4KAmCeA,EAjCA,WACX,OACI,gCACI,yBAAKC,UAAU,+CACX,uBAAGA,UAAU,eAAeC,KAAK,MAAjC,aACA,4BAAQD,UAAU,2BAA2BE,KAAK,SAASC,cAAY,WAAWC,cAAY,oBAAoBC,gBAAc,mBAC5HC,gBAAc,QAAQC,aAAW,sBACrC,yBAAKP,UAAU,2BAA2BQ,GAAG,oBACzC,wBAAIR,UAAU,mCACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,MAA7B,QAAuC,0BAAMD,UAAU,WAAhB,eAE3C,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,MAA7B,SAEJ,wBAAID,UAAU,qBACV,uBAAGA,UAAU,2BAA2BC,KAAK,KAAKO,GAAG,aAAaL,cAAY,WAAWM,gBAAc,OAAOH,gBAAc,SAA5H,YACA,yBAAKN,UAAU,gBAAgBU,kBAAgB,cAC3C,uBAAGV,UAAU,gBAAgBC,KAAK,MAAlC,YACA,uBAAGD,UAAU,gBAAgBC,KAAK,MAAlC,eAIZ,0BAAMD,UAAU,4BACZ,2BAAOA,UAAU,uBAAuBE,KAAK,OAAOS,YAAY,WAChE,4BAAQX,UAAU,uCAAuCE,KAAK,UAA9D,e,eCwFTU,EAhHI,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAAqB,EAENC,mBAE5B,CACIC,QAAS,GACTC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,cAAe,KAXe,mBAE/BC,EAF+B,KAErBC,EAFqB,OAcZT,oBAAS,GAdG,mBAc/BU,EAd+B,KAcxBC,EAdwB,KAiBhCC,EAAe,SAACC,GAElB,IAAIC,EAAa,eAAON,GACxBM,EAAcD,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,MACxCR,EAAYK,IAyChB,OACI,kBAAC,WAAD,KACA,0BAAM5B,UAAU,MAAMgC,SAxCD,SAACL,GAGtBA,EAAEM,iBAFN,IAISlB,EAAyEO,EAAzEP,QAAQC,EAAiEM,EAAjEN,UAAUC,EAAuDK,EAAvDL,SAASC,EAA8CI,EAA9CJ,UAAUC,EAAoCG,EAApCH,QAAQC,EAA4BE,EAA5BF,WAAWC,EAAiBC,EAAjBD,cACtC,KAAnBN,EAAQmB,QAAsC,KAArBlB,EAAUkB,QACf,KAApBjB,EAASiB,QAAuC,KAAtBd,EAAWc,QAChB,KAArBhB,EAAUgB,QAA0C,KAAzBb,EAAca,QACtB,KAAnBf,EAAQe,QASRT,GAAS,GACQ,eAAOH,GAEVd,GAAK2B,cACnBtB,EAAgBS,GAEhBC,EACI,CACIR,QAAS,GACTC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,cAAe,MApBvBI,GAAS,KA8BLD,EACA,yBAAKxB,UAAU,UACX,yBAAKA,UAAU,qBAAqBoC,KAAK,SACrC,0CADJ,2CAGK,KAGb,yBAAKpC,UAAU,uBACd,2BAAOqC,QAAQ,gBAAf,YACA,2BAAOnC,KAAK,OAAOM,GAAG,eAAeR,UAAU,eAC/C8B,KAAK,UAAUQ,SAAUZ,EAAcK,MAAOT,EAASP,WAExD,yBAAKf,UAAU,uBACd,2BAAOqC,QAAQ,kBAAf,cACA,2BAAOnC,KAAK,OAAOM,GAAG,iBAAiBR,UAAU,eACjD8B,KAAK,YAAYQ,SAAUZ,EAAcK,MAAOT,EAASN,aAE1D,yBAAKhB,UAAU,uBACd,2BAAOqC,QAAQ,iBAAf,wBACA,2BAAOnC,KAAK,OAAOM,GAAG,gBAAgBR,UAAU,eAAesC,SAAUZ,EAAcI,KAAK,WAAWC,MAAOT,EAASL,YAExH,yBAAKjB,UAAU,uBACd,2BAAOqC,QAAQ,kBAAf,iBACA,2BAAOnC,KAAK,OAAOM,GAAG,iBAAiBR,UAAU,eAAesC,SAAUZ,EAAcI,KAAK,YAAYC,MAAOT,EAASJ,aAE1H,yBAAKlB,UAAU,uBACd,2BAAOqC,QAAQ,gBAAf,wBACA,2BAAOnC,KAAK,OAAOM,GAAG,eAAeR,UAAU,eAAesC,SAAUZ,EAAcI,KAAK,UAAUC,MAAOT,EAASH,WAEtH,yBAAKnB,UAAU,uBACd,2BAAOqC,QAAQ,mBAAf,qBACA,2BAAOnC,KAAK,OAAOM,GAAG,kBAAkBR,UAAU,eAAesC,SAAUZ,EAAcI,KAAK,aAAaC,MAAOT,EAASF,cAE5H,yBAAKpB,UAAU,uBACd,2BAAOqC,QAAQ,sBAAf,kBACA,8BAAUE,KAAK,KAAKC,KAAK,IAAIhC,GAAG,qBAAqBR,UAAU,eAAesC,SAAUZ,EAAcI,KAAK,gBAAgBC,MAAOT,EAASD,iBAE5I,yBAAKrB,UAAU,qBACX,4BAAQE,KAAK,SAASF,UAAU,qCAAhC,wBC9FDyC,EAZE,SAAC,GAAkC,IAAjCnB,EAAgC,EAAhCA,SAAUoB,EAAsB,EAAtBA,iBACzB,OACI,wBAAI1C,UAAU,kBAAkB2C,QAAS,WAErCD,EAAiBpB,KAEjB,yBAAKsB,IAAI,wDAAwD5C,UAAU,iBAAiB6C,IAAI,KAChG,0BAAM7C,UAAU,QAAQsB,EAASP,QAAjC,IAA2CO,EAASN,aCejD8B,EArBG,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,UAAWL,EAAuB,EAAvBA,iBAS/B,OACC,wBAAI1C,UAAU,+BAGZ+C,EAAUC,KAAI,SAAAC,GACb,OAAO,kBAAC,EAAD,CAAU3B,SAAU2B,EAAGP,iBAAkBA,SCctCQ,MA7Bf,YAAgD,IAAjBC,EAAgB,EAAhBA,cAC3B,OACI,yBAAKnD,UAAU,eACX,yBAAKA,UAAU,uBACX,wBAAIA,UAAU,qCAAd,gCAEJ,yBAAKA,UAAU,aAGPmD,EAAcpC,QAEV,kBAAC,WAAD,KACA,yBAAK6B,IAAI,yDAAyDC,IAAI,GAAG7C,UAAU,kCACnF,uBAAGA,UAAU,aAAY,6CAA2BmD,EAAcpC,SAClE,uBAAGf,UAAU,aAAY,+CAA6BmD,EAAcnC,WACpE,uBAAGhB,UAAU,aAAY,yDAAuCmD,EAAclC,UAC9E,uBAAGjB,UAAU,aAAY,kDAA6BmD,EAAcjC,WACpE,uBAAGlB,UAAU,aAAY,yDAAoCmD,EAAchC,SAC3E,uBAAGnB,UAAU,aAAY,yDAAoCmD,EAAc/B,YAC3E,uBAAGpB,UAAU,aAAY,mDAAiCmD,EAAc9B,gBAExE,uBAAGrB,UAAU,yBAAb,8CC+BToD,MAhDf,WAGE,IAAIC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,cAC9CJ,IAGFA,EAAc,IAPH,MAWqBvC,mBAAS,IAX9B,mBAWNiC,EAXM,KAWKW,EAXL,OAY6B5C,mBAAS,IAZtC,mBAYNqC,EAZM,KAYST,EAZT,KAwBb,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,0BAAM1C,UAAU,mBACd,wBAAIA,UAAU,yBAAd,UAA6C,0BAAMA,UAAU,eAAhB,QAC7C,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAYa,gBAjBE,SAAC8C,GAEvB,IAAIC,EAAiB,sBAAOb,GAAP,CAAkBY,IACvCH,aAAaK,QAAQ,YAAaP,KAAKQ,UAAUF,IACjDF,EAAaE,QAgBT,6BACA,yBAAK5D,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAW+C,UAAWA,EAAWL,iBAAkBA,KAErD,yBAAK1C,UAAU,YACb,kBAAC,EAAD,CAAsBmD,cAAeA,SClC7BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLwD,QAAQxD,MAAMA,EAAMyD,a","file":"static/js/main.5d4aab6b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"!#\">Contactos</a>\r\n                <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n                <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                        <li className=\"nav-item active\">\r\n                            <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"!#\">Link</a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"!#\" id=\"dropdownId\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownId\">\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 1</a>\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 2</a>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\"/>\r\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { useState, Fragment } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Formulario = ({agregarContacto}) => {\r\n\r\n    const [contacto, setContacto] = useState(\r\n        //valor inicial del state\r\n        {\r\n            nombres: '',\r\n            apellidos: '',\r\n            fechaNac: '',\r\n            direccion: '',\r\n            telCasa: '',\r\n            telCelular: '',\r\n            observaciones: ''\r\n        });\r\n\r\n    const [error, setError] = useState(false);\r\n    \r\n    //Funcion que modifica el state de acuerdo a los inputs del formulario\r\n    const handleChange = (e) =>\r\n    {\r\n        let copiaContacto = {...contacto};\r\n        copiaContacto[e.target.name] = e.target.value;\r\n        setContacto(copiaContacto);\r\n    }\r\n\r\n    const enviarFormulario = (e) =>\r\n    {\r\n        //Prevenir que la pagina se recargue\r\n        e.preventDefault();\r\n        //Validar que todos los campos esten llenos\r\n        let {nombres,apellidos,fechaNac,direccion,telCasa,telCelular,observaciones} = contacto;\r\n        if (nombres.trim() === \"\" || apellidos.trim() === \"\" ||\r\n            fechaNac.trim() === \"\" || telCelular.trim() === \"\" ||\r\n            direccion.trim() === \"\" || observaciones.trim() === \"\" ||\r\n            telCasa.trim() === \"\") \r\n        {\r\n            //Error y todos los campos deben ser llenados\r\n            setError(true);//Variable reactiva\r\n            return; //este return obliga a la funcion a terminar si es verdadera\r\n        }\r\n        else\r\n        {\r\n            //Crear el contacto en la agenda sin errores en el formulario y cambiamos el error a false sin importar su valor anterior\r\n            setError(false);\r\n            let copiaContacto = {...contacto};\r\n            //Generando un nuevo atr a la copia\r\n            copiaContacto.id = uuidv4();\r\n            agregarContacto(contacto);\r\n            //Reiniciar el formulario\r\n            setContacto(\r\n                {\r\n                    nombres: '',\r\n                    apellidos: '',\r\n                    fechaNac: '',\r\n                    direccion: '',\r\n                    telCasa: '',\r\n                    telCelular: '',\r\n                    observaciones: ''\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n            {\r\n                error ?\r\n                <div className=\"col-12\">\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        <strong>Error!</strong> Todos los campos deben estar llenados\r\n                    </div>\r\n                </div> : null\r\n            }\r\n            \r\n            <div className=\"form-group col-md-3\">\r\n             <label htmlFor=\"inputNombres\">Nombres:</label>\r\n             <input type=\"text\" id=\"inputNombres\" className=\"form-control\" \r\n             name=\"nombres\" onChange={handleChange} value={contacto.nombres}/>\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n             <label htmlFor=\"inputApellidos\">Apellidos:</label>\r\n             <input type=\"text\" id=\"inputApellidos\" className=\"form-control\" \r\n             name=\"apellidos\" onChange={handleChange} value={contacto.apellidos}/>\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n             <label htmlFor=\"inputFechaNac\">Fecha de Nacimiento:</label>\r\n             <input type=\"date\" id=\"inputFechaNac\" className=\"form-control\" onChange={handleChange} name=\"fechaNac\" value={contacto.fechaNac}/>\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n             <label htmlFor=\"inputDireccion\">Dirección:</label>\r\n             <input type=\"text\" id=\"inputDireccion\" className=\"form-control\" onChange={handleChange} name=\"direccion\" value={contacto.direccion}/>\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n             <label htmlFor=\"inputTelCasa\">Teléfono de Casa:</label>\r\n             <input type=\"text\" id=\"inputTelCasa\" className=\"form-control\" onChange={handleChange} name=\"telCasa\" value={contacto.telCasa}/>\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n             <label htmlFor=\"inputTelCelular\">Telefono Celular:</label>\r\n             <input type=\"text\" id=\"inputTelCelular\" className=\"form-control\" onChange={handleChange} name=\"telCelular\" value={contacto.telCelular}/>\r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n             <label htmlFor=\"inputObservaciones\">Observaciones:</label>\r\n             <textarea cols=\"30\" rows=\"2\" id=\"inputObservaciones\" className=\"form-control\" onChange={handleChange} name=\"observaciones\" value={contacto.observaciones}></textarea>\r\n            </div>\r\n            <div className=\"form-group col-12\">\r\n                <button type=\"submit\" className=\"btn btn-block btn-outline-primary\">Agregar Contacto</button>\r\n            </div>\r\n        </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\n\r\nconst Contacto = ({contacto, setContactoSelec}) => {\r\n    return (\r\n        <li className=\"list-group-item\" onClick={() => \r\n        {\r\n            setContactoSelec(contacto);\r\n        }}>\r\n            <img src=\"https://api.adorable.io/avatars/45/abott@adorable.png\" className=\"rounded-circle\" alt=\"\"/> \r\n            <span className=\"ml-5\">{contacto.nombres} {contacto.apellidos}</span>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Contacto;\r\n","import React from 'react'\r\nimport Contacto from './Contacto'\r\n\r\nconst Contactos = ({ contactos, setContactoSelec }) => {\r\n\r\n // let lis = [];\r\n\r\n // contactos.forEach(c => {\r\n //  lis.push(<li className=\"list-group-item\">{c.nombres}</li>)\r\n // });\r\n\r\n\r\n return (\r\n  <ul className=\"list-group list-group-flush\">\r\n   {/* {lis} */}\r\n   {\r\n    contactos.map(c => {\r\n     return <Contacto contacto={c} setContactoSelec={setContactoSelec} />\r\n    })\r\n   }\r\n  </ul>\r\n )\r\n}\r\n\r\nexport default Contactos\r\n","import React, { Fragment } from 'react'\r\n\r\nfunction ContactoSeleccionado({contactoselec}) {\r\n    return (\r\n        <div className=\"card shadow\">\r\n            <div className=\"card-header bg-dark\">\r\n                <h3 className=\"card-title text-center text-light\">Información del Contacto</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                {\r\n                    //Si el contacto seleccionado tuviera el atr nombres, significa que el arreglo no esta vacio\r\n                    contactoselec.nombres ?\r\n                    (\r\n                        <Fragment>\r\n                        <img src=\"https://api.adorable.io/avatars/150/abott@adorable.png\" alt=\"\" className=\"rounded-circle d-block m-auto\"/>\r\n                        <p className=\"card-text\"><strong>Nombres: </strong>{contactoselec.nombres}</p>\r\n                        <p className=\"card-text\"><strong>Apellidos: </strong>{contactoselec.apellidos}</p>\r\n                        <p className=\"card-text\"><strong>Fecha de Nacimiento: </strong>{contactoselec.fechaNac}</p>\r\n                        <p className=\"card-text\"><strong>Dirección: </strong>{contactoselec.direccion}</p>\r\n                        <p className=\"card-text\"><strong>Teléfono de Casa: </strong>{contactoselec.telCasa}</p>\r\n                        <p className=\"card-text\"><strong>Teléfono Celular: </strong>{contactoselec.telCelular}</p>\r\n                        <p className=\"card-text\"><strong>Observaciones: </strong>{contactoselec.observaciones}</p>\r\n                        </Fragment>\r\n                    ) : <p className=\"card-text text-center\">No has seleccionado ningún contacto.</p>\r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactoSeleccionado\r\n","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Contactos from './components/Contactos';\nimport ContactoSeleccionado from './components/ContactoSeleccionado';\n\nfunction App() {\n\n  //Traemos los contactos desde el local storage\n  let contactosLS = JSON.parse(localStorage.getItem(\"contactos\"));\n  if(!contactosLS)\n  {\n    //Creando un arreglo vacio como para inicializar contactosLS\n    contactosLS = [];\n  }\n\n  //Creando el state\n  const [contactos, setContactos] = useState([]);\n  const [contactoselec, setContactoSelec] = useState({});\n\n  const agregarContacto = (objContacto) =>\n  {\n    let contactosAntiguos = [...contactos, objContacto];\n    localStorage.setItem(\"contactos\", JSON.stringify(contactosAntiguos));\n    setContactos(contactosAntiguos);\n\n    //Forma avanzada\n    //setContactos([...contactos, objContacto]);\n  }\n\n  return (\n    <Fragment>\n      <Header/>\n      <main className=\"container-fluid\">\n        <h1 className=\"display-3 text-center\">Agenda <span className=\"text-danger\">APP</span></h1>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Formulario agregarContacto={agregarContacto}/>\n          </div>\n        </div>\n        <hr/>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Contactos contactos={contactos} setContactoSelec={setContactoSelec}/>\n          </div>\n          <div className=\"col-md-6\">\n            <ContactoSeleccionado contactoselec={contactoselec}/>\n          </div>\n        </div>  \n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}